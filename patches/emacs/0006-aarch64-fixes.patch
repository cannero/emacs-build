From ff31e0fceea45cdf201aa0f0b7f6974463133a5f Mon Sep 17 00:00:00 2001
From: Kien Nguyen <kien.n.quang@gmail.com>
Date: Fri, 5 Jul 2024 02:50:31 -0700
Subject: [PATCH 6/6] aarch64 fixes

---
 configure.ac            |  8 +++++---
 nt/emacs-ARM64.manifest | 40 ++++++++++++++++++++++++++++++++++++++++
 nt/emacs.rc.in          |  4 +++-
 nt/inc/ms-w32.h         |  2 +-
 src/w32fns.c            |  8 ++++++++
 5 files changed, 57 insertions(+), 5 deletions(-)
 create mode 100644 nt/emacs-ARM64.manifest

diff --git a/configure.ac b/configure.ac
index 67da852667d..18948e127d5 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1525,7 +1525,7 @@ AC_DEFUN
   ;;
 
   # MinGW64
-  x86_64-*-* )
+  x86_64-*-* | aarch64-*-* )
     case "${canonical}" in
       *-mingw* )
 		opsys=mingw32
@@ -2389,6 +2389,7 @@ AC_DEFUN
 if test "$opsys" = "mingw32"; then
   case "$canonical" in
     x86_64-*-mingw*) C_SWITCH_SYSTEM="-mtune=generic" ;;
+    aarch64-*-mingw*) C_SWITCH_SYSTEM="-mtune=cortex-a53" ;;
     *) C_SWITCH_SYSTEM="-mtune=pentium4" ;;
   esac
 fi
@@ -3163,6 +3164,7 @@ AC_DEFUN
   EMACSRES="emacs.res"
   case "$canonical" in
     x86_64-*-*) EMACS_MANIFEST="emacs-x64.manifest" ;;
+    aarch64-*-*) EMACS_MANIFEST="emacs-ARM64.manifest" ;;
     *) EMACS_MANIFEST="emacs-x86.manifest" ;;
   esac
   dnl Construct something of the form "24,4,0,0" with 4 components.
@@ -7551,13 +7553,13 @@ AC_DEFUN
    ## If the values of -image-base are modified, the corresponding
    ## values of DEFAULT_IMAGE_BASE in w32fns.c should be kept in sync.
    case "$canonical" in
-     x86_64-*-*) LD_SWITCH_SYSTEM_TEMACS="-Wl,-stack,0x00800000 -Wl,-heap,0x00100000 -Wl,-image-base,0x400000000 -Wl,-entry,__start -Wl,-Map,./temacs.map" ;;
+     x86_64-*-* | aarch64-*-*) LD_SWITCH_SYSTEM_TEMACS="-Wl,-stack,0x00800000 -Wl,-heap,0x00100000 -Wl,-image-base,0x400000000 -Wl,-entry,__start -Wl,-Map,./temacs.map" ;;
      *) LD_SWITCH_SYSTEM_TEMACS="-Wl,-stack,0x00800000 -Wl,-heap,0x00100000 -Wl,-image-base,0x01000000 -Wl,-entry,__start -Wl,-Map,./temacs.map" ;;
    esac
    ## If they want unexec, disable Windows ASLR for the Emacs binary
    if test "$with_dumping" = "unexec"; then
       case "$canonical" in
-        x86_64-*-*) LD_SWITCH_SYSTEM_TEMACS="$LD_SWITCH_SYSTEM_TEMACS -Wl,-disable-dynamicbase -Wl,-disable-high-entropy-va -Wl,-default-image-base-low" ;;
+        x86_64-*-* | aarch64-*-*) LD_SWITCH_SYSTEM_TEMACS="$LD_SWITCH_SYSTEM_TEMACS -Wl,-disable-dynamicbase -Wl,-disable-high-entropy-va -Wl,-default-image-base-low" ;;
         *) LD_SWITCH_SYSTEM_TEMACS="$LD_SWITCH_SYSTEM_TEMACS -Wl,-disable-dynamicbase" ;;
       esac
    fi
diff --git a/nt/emacs-ARM64.manifest b/nt/emacs-ARM64.manifest
new file mode 100644
index 00000000000..bb5e2d37506
--- /dev/null
+++ b/nt/emacs-ARM64.manifest
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
+<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0" xmlns:asmv3="urn:schemas-microsoft-com:asm.v3">
+  <dependency>
+    <dependentAssembly>
+      <assemblyIdentity type="win32" name="Microsoft.Windows.Common-Controls"
+                        version="6.0.0.0" processorArchitecture="ARM64"
+                        publicKeyToken="6595b64144ccf1df"
+                        language="*"/>
+    </dependentAssembly>
+  </dependency>
+  <assemblyIdentity version="1.0.0.0" processorArchitecture="ARM64"
+		    name="emacs" type="win32"/>
+  <description>GNU Emacs</description>
+  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">
+    <security>
+      <requestedPrivileges>
+        <requestedExecutionLevel level="asInvoker"/>
+      </requestedPrivileges>
+    </security>
+  </trustInfo>
+    <compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">
+      <application>
+        <!-- Windows Vista -->
+        <supportedOS Id="{e2011457-1546-43c5-a5fe-008deee3d3f0}"/>
+        <!-- Windows 7 -->
+        <supportedOS Id="{35138b9a-5d96-4fbd-8e2d-a2440225f93a}"/>
+        <!-- Windows 8 -->
+        <supportedOS Id="{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}"/>
+        <!-- Windows 8.1 -->
+        <supportedOS Id="{1f676c76-80e1-4239-95bb-83d0f6d0da78}"/>
+        <!-- Windows 10 -->
+        <supportedOS Id="{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}"/>
+      </application>
+    </compatibility>
+  <asmv3:application>
+    <asmv3:windowsSettings xmlns="http://schemas.microsoft.com/SMI/2005/WindowsSettings">
+      <dpiAware>true</dpiAware>
+    </asmv3:windowsSettings>
+  </asmv3:application>
+</assembly>
diff --git a/nt/emacs.rc.in b/nt/emacs.rc.in
index ed217887c5d..62de3f362b4 100644
--- a/nt/emacs.rc.in
+++ b/nt/emacs.rc.in
@@ -1,6 +1,8 @@
 Emacs ICON   icons/emacs.ico
 32649 CURSOR icons/hand.cur
-#if defined (WIN64) || defined (__x86_64__)
+#ifdef __aarch64__
+1 24 "emacs-ARM64.manifest"
+#elif defined (WIN64) || defined (__x86_64__)
 1 24 "emacs-x64.manifest"
 #else
 1 24 "emacs-x86.manifest"
diff --git a/nt/inc/ms-w32.h b/nt/inc/ms-w32.h
index 7212e4d2984..d5b7b021527 100644
--- a/nt/inc/ms-w32.h
+++ b/nt/inc/ms-w32.h
@@ -217,7 +217,7 @@ #define MAX_UTF8_PATH   (MAXPATHLEN * 4)
 /* The following is needed for recovery from C stack overflows.  */
 #include <setjmp.h>
 typedef jmp_buf sigjmp_buf;
-#ifdef MINGW_W64
+#if defined(MINGW_W64) && !defined(_M_ARM64)
 /* Evidently, MinGW64's longjmp crashes when invoked from an exception
    handler, see https://sourceforge.net/p/mingw-w64/mailman/message/32421953/.
    This seems to be an unsolved problem in the MinGW64 runtime.  So we
diff --git a/src/w32fns.c b/src/w32fns.c
index bd65aa48a14..2080babde4e 100644
--- a/src/w32fns.c
+++ b/src/w32fns.c
@@ -11254,8 +11254,12 @@ stack_overflow_handler (void)
   if (gc_in_progress)
     terminate_due_to_signal (SIGSEGV, 40);
 #ifdef _WIN64
+# ifdef _M_ARM64
+  longjmp(return_to_command_loop, 1);
+# else
   /* See ms-w32.h: MinGW64's longjmp crashes if invoked in this context.  */
   __builtin_longjmp (return_to_command_loop, 1);
+# endif
 #else
   sys_longjmp (return_to_command_loop, 1);
 #endif
@@ -11282,7 +11286,11 @@ my_exception_handler (EXCEPTION_POINTERS * exception_data)
     {
       /* Call stack_overflow_handler ().  */
 #ifdef _WIN64
+# ifdef _M_ARM64
+      exception_data->ContextRecord->Pc = (DWORD_PTR) &stack_overflow_handler;
+# else
       exception_data->ContextRecord->Rip = (DWORD_PTR) &stack_overflow_handler;
+# endif
 #else
       exception_data->ContextRecord->Eip = (DWORD_PTR) &stack_overflow_handler;
 #endif
-- 
2.46.0.windows.1

